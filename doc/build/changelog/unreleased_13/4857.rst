.. change::
    :tags: usecase, engine
    :tickets: 4857

    Added new :func:`.create_engine` parameter
    :paramref:`.create_engine.max_identifier_length`. This overrides the
    dialect-coded "max identifier length" in order to accommodate for databases
    that have recently changed this length and the SQLAlchemy dialect has
    not yet been adjusted to detect for that version.  This parameter interacts
    with the existing :paramref:`.create_engine.label_length` parameter in that
    it establishes the maximum (and default) value for anonymously generated
    labels.   Additionally, post-connection detection of max identifier lengths
    has been added to the dialect system.  This feature is first being used
    by the Oracle dialect.

    .. seealso::

        :ref:`oracle_max_identifier_lengths` - in the Oracle dialect documentation

.. change::
    :tags: usecase, oracle
    :tickets: 4857

    The Oracle dialect now emits a warning if Oracle version 12.2 or greater is
    used, and the :paramref:`.create_engine.max_identifier_length` parameter is
    not set.   The version in this specific case defaults to that of the
    "compatibility" version set in the Oracle server configuration, not the
    actual server version.   In version 1.4, the default max_identifier_length
    for 12.2 or greater will move to 128 characters.  In order to maintain
    forwards compatibility, applications should set
    :paramref:`.create_engine.max_identifier_length` to 30 in order to maintain
    the same length behavior, or to 128 in order to test the upcoming behavior.
    This length determines among other things how generated constraint names
    are truncated for statements like ``CREATE CONSTRAINT`` and ``DROP
    CONSTRAINT``, which means a the new length may produce a name-mismatch
    against a name that was generated with the old length, impacting database
    migrations.

    .. seealso::

        :ref:`oracle_max_identifier_lengths` - in the Oracle dialect documentation