.. change::
   :tags: change, general
   :tickets: 4393

   A large change throughout the library has ensured that all objects,
   parameters, and behaviors which have been noted as deprecated or legacy now
   emit ``DeprecationWarning`` warnings when invoked.As the Python 3
   interpreter now defaults to displaying deprecation warnings, as well as that
   modern test suites based on tools like tox and pytest tend to display
   deprecation warnings, this change should make it easier to note what API
   features are obsolete. A major rationale for this change is so that long-
   deprecated features that nonetheless still see continue to see real world
   use can  finally be removed in the near future; the biggest example of this
   are the :class:`.SessionExtension` and :class:`.MapperExtension` classes as
   well as a handful of other pre-event extension hooks, which have been
   deprecated since version 0.7 but still remain in the library.  Another is
   that several major longstanding behaviors are to be deprecated as well,
   including the threadlocal engine strategy, the convert_unicode flag, and non
   primary mappers.

   .. seealso::

      :ref:`change_4393_general`


.. change::
   :tags: change, engine
   :tickets: 4393

   The "threadlocal" engine strategy which has been a legacy feature of
   SQLAlchemy since around version 0.2 is now deprecated, along with the
   :paramref:`.Pool.threadlocal` parameter of :class:`.Pool` which has no
   effect in most modern use cases.

   .. seealso::

      :ref:`change_4393_threadlocal`

.. change::
   :tags: change, sql
   :tickets: 4393

   The :paramref:`.create_engine.convert_unicode` and
   :paramref:`.String.convert_unicode` parameters have been deprecated.  These
   parameters were built back when most Python DBAPIs had little to no support
   for Python Unicode objects, and SQLAlchemy needed to take on the very
   complex task of marshalling data and SQL strings between Unicode and
   bytestrings throughout the system in a performant way.  Thanks to Python 3,
   DBAPIs were compelled to adapt to Unicode-aware APIs and today all DBAPIs
   supported by SQLAlchemy support Unicode natively, including on Python 2,
   allowing this long-lived and very complicated feature to finally be (mostly)
   removed.  There are still of course a few Python 2 edge cases where
   SQLAlchemy has to deal with Unicode however these are handled automatically;
   in modern use, there should be no need for end-user interaction with these
   flags.

   .. seealso::

      :ref:`change_4393_convertunicode`
